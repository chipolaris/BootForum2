package com.github.chipolaris.bootforum2.dto; // Or your appropriate DTO package

import com.fasterxml.jackson.annotation.JsonInclude;

import java.time.Instant;
import java.util.Map;
import java.util.List;

/**
 * A generic, immutable response object structure for consistent API communication
 * between Angular frontend and Spring Boot backend.
 * <p>
 * Use the static factory methods (success, error, validationError) for convenient instantiation.
 *
 * @param success Indicates if the operation was successfully processed (required).
 * @param message An optional, primary human-readable message (e.g., for success confirmation or general errors).
 * @param data    The optional data payload being returned (e.g., a user object, a list). Null on error or if no data is applicable.
 * @param errors  An optional list of error messages, primarily for validation or general errors. Null if no specific errors.
 * @param <T>     The type of the data payload.
 */
@JsonInclude(JsonInclude.Include.NON_NULL) // Keep this annotation for Jackson to omit null fields in JSON output
public record ApiResponse<T>(
        boolean success,
        String message,
        T data,
        List<String> errors,
        String timestamp
) {

    // --- Static Factory Methods for common scenarios ---
    // These remain very useful for creating instances clearly and concisely

    /**
     * Creates a success response with data and a message.
     */
    public static <T> ApiResponse<T> success(T data, String message) {
        // Calls the canonical record constructor generated by the compiler
        return new ApiResponse<>(true, message, data, null, Instant.now().toString());
    }

    /**
     * Creates a success response with data only.
     */
    public static <T> ApiResponse<T> success(T data) {
        return new ApiResponse<>(true, null, data, null, Instant.now().toString());
    }

    /**
     * Creates a success response with a message only (no data payload).
     * Useful for operations like DELETE or updates that don't return data.
     */
    public static ApiResponse<Void> success(String message) {
        return new ApiResponse<>(true, message, null, null, Instant.now().toString());
    }

    /**
     * Creates a generic error response with a message.
     * Suitable for non-validation errors (e.g., 404 Not Found, 500 Internal Server Error).
     */
    public static ApiResponse<Void> error(String message) {
        return new ApiResponse<>(false, message, null, null, Instant.now().toString());
    }

    /**
     * Creates a generic error response with list of errors and a general message.
     */
    public static ApiResponse<Void> error(List<String> errors, String message) {
        // Ensure we don't include an empty list, only null or a populated one
        List<String> effectiveErrors = (errors != null && !errors.isEmpty()) ? errors : null; // Logic remains similar
        return new ApiResponse<>(false, message, null, effectiveErrors, Instant.now().toString());
    }

    /**
     * Creates a validation error response with specific field errors and a default message.
     */
    public static ApiResponse<Void> validationError(List<String> errors) {
        List<String> effectiveErrors = (errors != null && !errors.isEmpty()) ? errors : null;
        return new ApiResponse<>(false, "Validation failed", null, effectiveErrors, Instant.now().toString());
    }

    // --- No explicit components, constructor, getters, equals, hashCode, or toString needed ---
    // The record declaration automatically provides:
    // 1. Private final fields for success, message, data, errors.
    // 2. A public canonical constructor: ApiResponse(boolean success, String message, T data, Map<String, String> errors).
    // 3. Public accessor methods: success(), message(), data(), errors().
    // 4. Implementations of equals(), hashCode(), and toString() based on all components.
}